{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","PRIMARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","bigHeight","height","result","times","t","a","swap","n","x","temp","bubleSort","getBubleSortAnimation","time","arrayL","totalAnimationSteps","arrAnimation","num","z","fix","console","log","ar","tmp","className","map","value","idx","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.486b6617.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nexport function getBubleSortAnimation(array,times) {\n  const animations = [];\n  var t = bubleSort(array,animations,times);\n  times = t;\n  return {animations,times};\n}\nfunction bubleSort(a,animations,times)\n{\n    var swap = true;\n    var n = a.length-1;\n    var x=a;\n    do{\n        swap = false;\n        for (let i = 0; i < n; i++) {\n            if (x[i] > x[i+1])\n            {\n              animations.push([i]);\n               var temp = x[i];\n               x[i] = x[i+1];\n               x[i+1] = temp;\n               swap = true;\n            }\n    }\n    times++;\n    n--;\n    if (!swap) {\n      return times;\n    }\n    }while(swap);\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getBubleSortAnimation} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\nconst times = 0;\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 31;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 50));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const bigHeight = 10 * newHeight;\n          barOneStyle.height = `${bigHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  bubbleSort() {\n    const result = getBubleSortAnimation(this.state.array,times);\n    const animations = result.animations;\n    var time = result.times;\n    var arrayL = ((this.state.array.length - 1) * 3);\n    var totalAnimationSteps = arrayL * time;\n    \n    var arrAnimation = [];\n    var num = 0;\n    for (let t = 0; t < arrayL; t++) {\n      var test = t % 3 !== 2;\n      if (test) {\n        arrAnimation.push([num,num+1]);\n      }\n      else{\n        arrAnimation.push([num,num+1]);\n        num++;\n      }\n    }\n     var indexAnimation = 0;\n     var x = 0;\n     var t = 0;\n     var z = 0;\n     var fix = 0;\n      for (let i = 0; i < totalAnimationSteps; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n          setTimeout(() => {\n            console.log('z '+ z)\n          const [barOneIdx,barTwoIdx] = arrAnimation[z];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = (z - x) % 2 !== 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n            z++;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        else {\n          setTimeout(() => {\n            // if (animations.length - 2 == t) {\n            //   console.log(\"tuk\");\n            // }\n            // if (arrAnimation.length == i) {\n            //   i = -1;\n            // }\n            console.log('i ' + i );\n            console.log('arrr ' + (arrayL-1));\n            console.log(i % (arrayL - 1) === 0);\n           \n            var ar = arrAnimation[z];\n            if (animations[t] == ar[0]) {\n              t++;\n              const [barOneIdx,barTwoIdx] = arrAnimation[z];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const tmp = barOneStyle.height;\n            \n            barOneStyle.height = `${barTwoStyle.height}`;\n            barTwoStyle.height = `${tmp}`;\n            }\n            if ((i - fix) % (arrayL - 1) === 0) {\n              console.log('i wath to be here');\n              z = -1;\n              time--;\n              fix++;\n            }\n            z++;\n            x++;\n        }, i * ANIMATION_SPEED_MS);\n      }\n  }\n}\n  quickSort() {\n  }\n  heapSort() {\n  }\n  \n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${10*value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}