{"version":3,"sources":["Components/SortingAlgorithms/SortingAlgorithms.js","Components/SortingAlgorithms/SortingVisualizer.jsx","Components/PathfindingVisualizer/Node/Node.jsx","Components/algorithms/dijkstra.js","Components/algorithms/dfs.js","Components/algorithms/aStar.js","Components/PathfindingVisualizer/PathfindingVisualizer.jsx","Components/UI/Home.jsx","Components/UI/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","getBubleSortAnimation","times","t","isSorted","elementsNumber","x","i","push","temp","console","log","bubleSort","getInsertionSortAnimation","currentElement","j","insertionSort","getQuickSortAnimation","quickSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","arr","left","right","part","pivot","swap","partition","index1","index2","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","handleChange","e","target","value","randomIntFromInterval","setState","handleSpeedValueChange","speedValue","state","stop","sorted","this","resetArray","document","getElementsByClassName","style","backgroundColor","enableAllButtons","getElementById","disabled","buttons","index","className","algoButtons","btn","createElement","onclick","innerHTML","appendChild","remove","window","location","reload","disableAllButtons","addResetButton","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","bigHeight","height","removeResetButton","disableAlgorithmButtons","result","time","arrayL","totalAnimationSteps","arrAnimation","num","z","fix","ar","tmp","y","isColorChange","barOne","barTwo","test","id","onClick","bubbleSort","mergeSort","quickSort","type","min","max","onChange","map","idx","React","Component","random","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","dfs","visitedNodes","unvisiteNodes","nextNode","adjNodes","pop","currentClosest","totalDistance","heuristicDistance","splice","updateNeighbors","boardArray","name","start","heuristic","potentialNeighbor","coordinates","split","parseInt","toString","status","getNeighbors","updateNode","currentNode","targetNode","actualTargetNode","actualStartNode","nodeOne","nodeTwo","currentCoordinates","targetCoordinates","x1","y1","x2","y2","direction","getDistance","nodeOneCoordinates","ele","nodeTwoCoordinates","xOne","xTwo","yOne","yTwo","xChange","abs","yChange","manhattanDistance","distanceToCompare","weight","path","FINISH_NODE_COL","PathfindingVisualizer","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","animateShortestPath","unshift","getNodesInShortestPathOrder","animateDijkstra","animateDFS","nodesToAnimate","Object","keys","AStar","getNewGrid","visualizeDijkstra","visualizeDFS","clearBoard","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","Home","Navbar","to","App","exact","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e6e4cac.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nexport function getBubleSortAnimation(array,times) {\n  const animations = [];\n  var t = bubleSort(array,animations,times);\n  times = t;\n  return {animations,times};\n}\n\nexport function getSelectionSortAnimation(array,times) {\n  const animations = [];\n  var t = selectionSort(array,animations,times);\n  times = t;\n  return {animations,times};\n}\n\nexport function getInsertionSortAnimation(array) {\n  const copyArr = [...array];\n  const animations = []; \n  insertionSort(copyArr,animations);\n  return animations;\n}\n\nexport function getQuickSortAnimation(array){\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n\n  return animations;\n}\n\nfunction bubleSort(array,animations,times)\n{\n    var isSorted = true;\n    var elementsNumber = array.length-1;\n    var x = array;\n    do{\n      isSorted = false;\n        for (let i = 0; i < elementsNumber; i++) {\n            if (x[i] > x[i+1])\n            {\n              animations.push([i]);\n               var temp = x[i];\n               x[i] = x[i+1];\n               x[i+1] = temp;\n               isSorted = true;\n            }\n    }\n    times++;\n    elementsNumber--;\n    console.log(elementsNumber)\n    if (!isSorted) {\n      return times;\n    }\n    }while(isSorted);\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n//some bug !!\nfunction insertionSort(array,animations){\n    let length = array.length;\n    for (let i = 1; i < length; i++) {\n      let currentElement = array[i];\n      let j = i - 1;\n      if (!(j >= 0 && array[j] < currentElement)) {\n         animations.push([[j,j + 1],false])\n      }\n      while (j >= 0 && array[j] > currentElement) {\n        animations.push([[j,j + 1],true])\n        array[j + 1] = array[j];\n        j = j - 1;\n      }\n      array[j + 1] = currentElement;\n  }\n  console.log('sorted ',array)\n    return {animations};\n}\n\nfunction selectionSort(array, compare, swap) {\n  for (var i = 0; i < array.length - 1; i++) {\n    var minIndex = i;\n\n    for (var j = i + 1; j < array.length; j++) {\n      if (compare(array, j, minIndex) < 0) {\n        minIndex = j;\n      }\n    }\n\n    if (minIndex !== i) {\n      swap(array, i, minIndex);\n    }\n  }\n  return array;\n}\n\nfunction quickSortHelper(arr, left, right, animations) {\n  if (right <= left) return;\n  const part = partition(arr, left, right, animations);\n  quickSortHelper(arr, left, part, animations);\n  quickSortHelper(arr, part + 1, right, animations);\n}\n\nfunction partition(arr, left, right, animations) {\n  let i = left;\n  let j = right + 1;\n\n  const pivot = arr[left];\n\n  while (true) {\n    while (arr[++i] <= pivot) { \n      if (i === right) break;\n      animations.push([[i,left], false,[left,right]]);\n    }\n    while (arr[--j] >= pivot) {\n      \n      if (j === left) break;\n      animations.push([[j,left], false,[left,right]]);\n    }\n    if (j <= i) break;\n    animations.push([[i, j], true,[left,right]]);\n    swap(arr, i, j);\n  }\n  animations.push([[left, j], true,[left,right]]);\n  swap(arr, left, j);\n  return j;\n}\n\nfunction swap(arr, index1, index2) {\n  const temp = arr[index1];\n  arr[index1] = arr[index2];\n  arr[index2] = temp;\n}\n","import React from 'react';\nimport {getMergeSortAnimations} from './SortingAlgorithms';\nimport {getBubleSortAnimation} from './SortingAlgorithms';\nimport {getInsertionSortAnimation} from './SortingAlgorithms';\nimport {getQuickSortAnimation} from './SortingAlgorithms';\n\nimport './SortingVisualizer.css';\n\nconst times = 0;\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 200;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 31;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      value: 30,\n      speedValue: 120,\n      stop:false,\n      sorted:false\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  handleChange = (e) =>{\n    const array = [];\n    for (let i = 0; i < e.target.value; i++) {\n      array.push(randomIntFromInterval(5, 40));\n    }\n    this.setState({array});\n    this.setState({value: e.target.value})\n  };\n\n  handleSpeedValueChange = (e) =>{\n    this.setState({speedValue: e.target.value}) \n  };\n  resetArray() {\n    //  if (this.state.sorted == true) {\n    //    window.location.reload();\n    //    this.state.sorted = false;\n    //  }\n    const array = [];\n     for (let i = 0; i < this.state.value; i++) {\n      array.push(randomIntFromInterval(5, 40));\n    }\n    for (let i = 0; i < this.state.array.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      arrayBars[i].style.backgroundColor = 'turquoise';\n } \n this.enableAllButtons();\n this.setState({array});\n  }\n  disableAllButtons(){\n    document.getElementById('changeArrLength').disabled = true;\n    document.getElementById('changeAnimationSpeed').disabled = true;\n    const buttons = document.getElementsByClassName('sm-btn')\n     for (let index = 0; index < buttons.length; index++) {\n        buttons[index].disabled = true;\n        buttons[index].className = \"sm-btn disabled\";\n     }\n  }\n  disableAlgorithmButtons(){\n    const algoButtons = document.getElementsByClassName('algorithm-btn');\n    for (let index = 0; index < algoButtons.length; index++) {\n        algoButtons[index].disabled = true;\n        algoButtons[index].className = 'sm-btn algorithm-btn algorithm-button-disabled';\n    }\n  }\n  enableAllButtons(){\n    document.getElementById('changeArrLength').disabled = false;\n    document.getElementById('changeAnimationSpeed').disabled = false;\n    const buttons = document.getElementsByClassName('sm-btn')\n    for (let index = 0; index < buttons.length; index++) {\n      buttons[index].disabled = false;\n      if (index > 3) {\n        buttons[index].className = \"glow-on-hover sm-btn algorithm-btn\";\n      }\n      else{\n        buttons[index].className = \"glow-on-hover sm-btn\";\n      }\n    }\n  }\n\n  addResetButton(){\n    let btn = document.createElement('button');\n    btn.onclick = () => {\n      this.stop()\n    };\n    btn.className = \"sm-btn resetBtn\";\n    btn.innerHTML = \"RESET\"\n    document.getElementById('resetBtn').appendChild(btn);\n  }\n\n  removeResetButton(){\n    const buttons = document.getElementsByClassName('glow-on-hover');\n    buttons[buttons.length - 1].remove();\n  }\n\n  stop(){\n     window.location.reload();\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    this.disableAllButtons();\n    this.addResetButton();\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speedValue);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const bigHeight = 10 * newHeight;\n          barOneStyle.height = `${bigHeight}px`;\n          if (i == animations.length - 1) {\n            this.enableAllButtons();\n            this.removeResetButton();\n            this.disableAlgorithmButtons();\n          }\n        }, i * this.state.speedValue);\n      }\n    }\n  }\n  bubbleSort() {\n    const result = getBubleSortAnimation(this.state.array,times);\n    const animations = result.animations;\n    this.disableAllButtons();\n    this.addResetButton();\n    var time = result.times;\n    var arrayL = ((this.state.array.length - 1) * 3);\n    var totalAnimationSteps = arrayL * time;\n    var arrAnimation = [];\n    var num = 0;\n    for (let t = 0; t < arrayL; t++) {\n      var test = t % 3 !== 2;\n      if (test) {\n        arrAnimation.push([num,num+1]);\n      }\n      else{\n        arrAnimation.push([num,num+1]);\n        num++;\n      }\n    }\n\n     var x = 0;\n     var t = 0;\n     var z = 0;\n     var fix = 0;\n     console.log(arrAnimation);\n      for (let i = 0; i < totalAnimationSteps; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n          setTimeout(() => {\n          const [barOneIdx,barTwoIdx] = arrAnimation[z];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = (z - x) % 2 !== 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n            z++;\n          }, i * this.state.speedValue);\n        }\n        else {\n          setTimeout(() => {\n            var ar = arrAnimation[z];\n            if (animations[t] == ar[0]) {\n              t++;\n            const [barOneIdx,barTwoIdx] = arrAnimation[z];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const tmp = barOneStyle.height;\n            barOneStyle.height = `${barTwoStyle.height}`;\n            barTwoStyle.height = `${tmp}`;\n            }\n            if ((i - fix) % (arrayL - 1) === 0) {\n              z = -1;\n              x = -1;\n              time--;\n              fix++;\n            }\n            z++;\n            x++;\n            if (i == totalAnimationSteps - 1) {\n              this.enableAllButtons();\n              this.removeResetButton();\n              this.disableAlgorithmButtons();\n            }\n         }, i * this.state.speedValue);\n        }\n\n     }\n  } \n  insertionSort() {\n    let animations = [];\n    const result = getInsertionSortAnimation(this.state.array);\n    animations = result; \n    let z = 0;\n    let x = 0;\n    this.disableAllButtons();\n    this.addResetButton();\n    console.log('arrray ',this.state.array)\n    console.log(animations)\n    for (let i = 0; i < animations.length; i++) {\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName('array-bar');\n          for (let y = 0; y < 3; y++) {\n              setTimeout(()=>{\n              const isColorChange = y % 3 !== 2;\n              const barOne = arrayBars[animations[i][0][0]].style;\n              const barTwo = arrayBars[animations[i][0][1]].style;\n              if (isColorChange) {\n                const color = (z - x) % 2 !== 0 ? PRIMARY_COLOR : SECONDARY_COLOR; \n                barOne.backgroundColor = color;\n                barTwo.backgroundColor = color;\n                z++;\n              }\n              else{\n                if (animations[i][1] == true) {\n                  const barOneStyle = arrayBars[animations[i][0][0]].style;\n                  const barTwoStyle = arrayBars[animations[i][0][1]].style;\n                  const tmp = barOneStyle.height;\n                  barOneStyle.height = `${barTwoStyle.height}`;\n                  barTwoStyle.height = `${tmp}`;\n                } \n                 z++;\n                 x++; \n            }\n        if (i == (animations.length - 1) && y == 2) {\n          this.enableAllButtons();\n          this.removeResetButton();\n          this.disableAlgorithmButtons();\n          }\n            },y * this.state.speedValue);\n        }\n      },i * (this.state.speedValue * 3))\n    }\n  }\n  quickSort() {\n  const animations = getQuickSortAnimation(this.state.array);\n  this.disableAllButtons();\n  this.addResetButton();\n    let z = 0;\n    let x = 0;\n    for (let i = 0; i < animations.length; i++) {\n      setTimeout(()=> {\n        for (let index = animations[i][2][0]; index < animations[i][2][1]; index++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[index].style.backgroundColor = 'yellow';\n        }\n        const arrayBars = document.getElementsByClassName('array-bar');\n          for (let y = 0; y < 3; y++) {\n            setTimeout(()=>{\n              const isColorChange = y % 3 !== 2;\n              const barOne = arrayBars[animations[i][0][0]].style;\n              if (animations[i][1] == false) {\n                const barTwo = arrayBars[animations[i][0][1]].style;\n                barTwo.backgroundColor = 'green'\n              }\n              if (isColorChange) {\n                const color = (z - x) % 2 !== 0 ? PRIMARY_COLOR : SECONDARY_COLOR; \n                barOne.backgroundColor = color;\n                z++;\n              }\n              else{\n                if (animations[i][1] == true) {\n                  const barOneStyle = arrayBars[animations[i][0][0]].style;\n                  const barTwoStyle = arrayBars[animations[i][0][1]].style;\n                  const tmp = barOneStyle.height;\n                  barOneStyle.height = `${barTwoStyle.height}`;\n                  barTwoStyle.height = `${tmp}`;\n                }\n                 z++;\n                 x++; \n            }  \n            var test = animations.length - 1\n        if (i == test && y == 2) {\n          this.enableAllButtons();\n          this.removeResetButton();\n          this.disableAlgorithmButtons();\n        }\n            },y * this.state.speedValue);\n        }\n      },i* (this.state.speedValue * 3))\n    }\n  }\n  //implement\n  heapSort() {\n  }\n  selectionSort(){\n  }\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"board-container\">\n        <div id='buttons' className=\"algo-btn\">\n        <button className=\"glow-on-hover sm-btn \" onClick={() => this.resetArray()}>New Array</button>\n        <button className=\"glow-on-hover sm-btn algorithm-btn\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button className=\"glow-on-hover sm-btn algorithm-btn\" onClick={() => this.insertionSort()}>Insertion Sort</button>\n        <button className=\"glow-on-hover sm-btn algorithm-btn\" onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button className=\"glow-on-hover sm-btn algorithm-btn\" onClick={() => this.quickSort()}>Quick Sort</button>\n        </div>\n        <div id=\"resetBtn\"></div>\n        <div className=\"slider\">\n        <input id=\"changeArrLength\" className = \"sliderArrayLength\"\n           type=\"range\"\n           min={10}\n           max={50}\n           value={this.state.value} \n           onChange={this.handleChange}\n             />\n              <div>{this.state.value}</div>\n             <input id=\"changeAnimationSpeed\" className=\"sliderAnimationSpeed\"\n           type=\"range\"\n           min={10}\n           max={250}\n           value={this.state.speedValue} \n           onChange={this.handleSpeedValueChange}\n             />\n            <div>{this.state.speedValue}</div>\n          </div>\n        <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${13*value}px`,\n            }}>{value}</div>\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n     while(!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;  \r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}","export function dfs(grid, startNode, finishNode){\r\n    const visitedNodes = [];\r\n    const unvisiteNodes = getAllNodes(grid);\r\n    var unvisitedNeighbors = [];\r\n    while(!!unvisiteNodes.length){\r\n        const nextNode = startNode\r\n        startNode.isVisited = true;\r\n        visitedNodes.push(nextNode);\r\n        //const adjNodes = getNextNode(nextNode, grid);\r\n        const adjNodes = getUnvisitedNeighbors(nextNode, grid,unvisitedNeighbors);\r\n        if (nextNode === finishNode) return visitedNodes;\r\n        startNode = adjNodes.pop();\r\n        if (startNode.isWall){\r\n            startNode = adjNodes.pop();\r\n                if (startNode.isWall) {\r\n                    startNode = adjNodes.pop()\r\n                        if (startNode.isWall) {\r\n                            startNode = adjNodes.pop();\r\n                        }\r\n                }\r\n        };\r\n        unvisiteNodes.shift();\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid,unvisitedNeighbors){\r\n    const {col, row} = node;  \r\n    if (col > 0) unvisitedNeighbors.push(grid[row][col - 1]);\r\n    if (row < grid.length - 1) unvisitedNeighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) unvisitedNeighbors.push(grid[row][col + 1]);\r\n    if (row > 0) unvisitedNeighbors.push(grid[row - 1][col]);\r\n  \r\n    return unvisitedNeighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getNextNode(node, grid) {\r\n    let nextNodes = [];\r\n    const {col, row} = node;\r\n\r\n    if (col > 0) nextNodes.push(grid[row][col - 1]);\r\n    if (row < grid.length - 1) nextNodes.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) nextNodes.push(grid[row][col + 1]);\r\n    if (row > 0) nextNodes.push(grid[row - 1][col]);\r\n\r\n    // if(row > 0) {\r\n    //     if (!grid[row - 1][col].isVisited && row > 0){\r\n    //         nextNode = grid[row - 1][col];\r\n    //     } \r\n    //     else if (!grid[row][col + 1].isVisited && col < grid[0].length - 1){\r\n    //         nextNode = grid[row][col + 1];\r\n    //     } \r\n    //     else if (!grid[row + 1][col].isVisited && row < grid.length - 1){\r\n    //         nextNode = grid[row + 1][col];\r\n    //     } \r\n    //     else if (!grid[row][col - 1].isVisited && col > 0){\r\n    //         nextNode = grid[row][col - 1];\r\n    //     } \r\n    // }\r\n    var test = nextNodes.filter(nextNode => !nextNode.isVisited);\r\n    return test.filter(nextNode => !nextNode.isWall);\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for(const node of row){\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}","export function AStar(nodes, start, target, nodesToAnimate, boardArray, name, heuristic) {\r\n    if (!start || !target || start === target) {\r\n      return false;\r\n    }\r\n    nodes[start].distance = 0;\r\n    nodes[start].totalDistance = 0;\r\n    nodes[start].direction = \"up\";\r\n    let unvisitedNodes = Object.keys(nodes);\r\n    while (unvisitedNodes.length) {\r\n      let currentNode = closestNode(nodes, unvisitedNodes);\r\n      while (currentNode.status === \"wall\" && unvisitedNodes.length) {\r\n        currentNode = closestNode(nodes, unvisitedNodes)\r\n      }\r\n      if (currentNode.distance === Infinity) return false;\r\n      nodesToAnimate.push(currentNode);\r\n      currentNode.status = \"visited\";\r\n      if (currentNode.id === target) {\r\n        return \"success!\";\r\n      }\r\n      updateNeighbors(nodes, currentNode, boardArray, target, name, start, heuristic);\r\n    }\r\n  }\r\n  \r\n  function closestNode(nodes, unvisitedNodes) {\r\n    let currentClosest, index;\r\n    for (let i = 0; i < unvisitedNodes.length; i++) {\r\n      if (!currentClosest || currentClosest.totalDistance > nodes[unvisitedNodes[i]].totalDistance) {\r\n        currentClosest = nodes[unvisitedNodes[i]];\r\n        index = i;\r\n      } else if (currentClosest.totalDistance === nodes[unvisitedNodes[i]].totalDistance) {\r\n        if (currentClosest.heuristicDistance > nodes[unvisitedNodes[i]].heuristicDistance) {\r\n          currentClosest = nodes[unvisitedNodes[i]];\r\n          index = i;\r\n        }\r\n      }\r\n    }\r\n    unvisitedNodes.splice(index, 1);\r\n    return currentClosest;\r\n  }\r\n  \r\n  function updateNeighbors(nodes, node, boardArray, target, name, start, heuristic) {\r\n    let neighbors = getNeighbors(node.id, nodes, boardArray);\r\n    for (let neighbor of neighbors) {\r\n      if (target) {\r\n        updateNode(node, nodes[neighbor], nodes[target], name, nodes, nodes[start], heuristic, boardArray);\r\n      } else {\r\n        updateNode(node, nodes[neighbor]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function updateNode(currentNode, targetNode, actualTargetNode, name, nodes, actualStartNode, heuristic, boardArray) {\r\n    let distance = getDistance(currentNode, targetNode);\r\n    if (!targetNode.heuristicDistance) targetNode.heuristicDistance = manhattanDistance(targetNode, actualTargetNode);\r\n    let distanceToCompare = currentNode.distance + targetNode.weight + distance[0];\r\n    if (distanceToCompare < targetNode.distance) {\r\n      targetNode.distance = distanceToCompare;\r\n      targetNode.totalDistance = targetNode.distance + targetNode.heuristicDistance;\r\n      targetNode.previousNode = currentNode.id;\r\n      targetNode.path = distance[1];\r\n      targetNode.direction = distance[2];\r\n    }\r\n  }\r\n  \r\n  function getNeighbors(id, nodes, boardArray) {\r\n    let coordinates = id.split(\"-\");\r\n    let x = parseInt(coordinates[0]);\r\n    let y = parseInt(coordinates[1]);\r\n    let neighbors = [];\r\n    let potentialNeighbor;\r\n    if (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n      potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    if (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n      potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    if (boardArray[x][y - 1]) {\r\n      potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    if (boardArray[x][y + 1]) {\r\n      potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    // if (boardArray[x - 1] && boardArray[x - 1][y - 1]) {\r\n    //   potentialNeighbor = `${(x - 1).toString()}-${(y - 1).toString()}`\r\n    //   let potentialWallOne = `${(x - 1).toString()}-${y.toString()}`\r\n    //   let potentialWallTwo = `${x.toString()}-${(y - 1).toString()}`\r\n    //   if (nodes[potentialNeighbor].status !== \"wall\" && !(nodes[potentialWallOne].status === \"wall\" && nodes[potentialWallTwo].status === \"wall\")) neighbors.push(potentialNeighbor);\r\n    // }\r\n    // if (boardArray[x + 1] && boardArray[x + 1][y - 1]) {\r\n    //   potentialNeighbor = `${(x + 1).toString()}-${(y - 1).toString()}`\r\n    //   let potentialWallOne = `${(x + 1).toString()}-${y.toString()}`\r\n    //   let potentialWallTwo = `${x.toString()}-${(y - 1).toString()}`\r\n    //   if (nodes[potentialNeighbor].status !== \"wall\" && !(nodes[potentialWallOne].status === \"wall\" && nodes[potentialWallTwo].status === \"wall\")) neighbors.push(potentialNeighbor);\r\n    // }\r\n    // if (boardArray[x - 1] && boardArray[x - 1][y + 1]) {\r\n    //   potentialNeighbor = `${(x - 1).toString()}-${(y + 1).toString()}`\r\n    //   let potentialWallOne = `${(x - 1).toString()}-${y.toString()}`\r\n    //   let potentialWallTwo = `${x.toString()}-${(y + 1).toString()}`\r\n    //   if (nodes[potentialNeighbor].status !== \"wall\" && !(nodes[potentialWallOne].status === \"wall\" && nodes[potentialWallTwo].status === \"wall\")) neighbors.push(potentialNeighbor);\r\n    // }\r\n    // if (boardArray[x + 1] && boardArray[x + 1][y + 1]) {\r\n    //   potentialNeighbor = `${(x + 1).toString()}-${(y + 1).toString()}`\r\n    //   let potentialWallOne = `${(x + 1).toString()}-${y.toString()}`\r\n    //   let potentialWallTwo = `${x.toString()}-${(y + 1).toString()}`\r\n    //   if (nodes[potentialNeighbor].status !== \"wall\" && !(nodes[potentialWallOne].status === \"wall\" && nodes[potentialWallTwo].status === \"wall\")) neighbors.push(potentialNeighbor);\r\n    // } \r\n    return neighbors;\r\n  }\r\n  \r\n  \r\n  function getDistance(nodeOne, nodeTwo) {\r\n    let currentCoordinates = nodeOne.id.split(\"-\");\r\n    let targetCoordinates = nodeTwo.id.split(\"-\");\r\n    let x1 = parseInt(currentCoordinates[0]);\r\n    let y1 = parseInt(currentCoordinates[1]);\r\n    let x2 = parseInt(targetCoordinates[0]);\r\n    let y2 = parseInt(targetCoordinates[1]);\r\n    if (x2 < x1 && y1 === y2) {\r\n      if (nodeOne.direction === \"up\") {\r\n        return [1, [\"f\"], \"up\"];\r\n      } else if (nodeOne.direction === \"right\") {\r\n        return [2, [\"l\", \"f\"], \"up\"];\r\n      } else if (nodeOne.direction === \"left\") {\r\n        return [2, [\"r\", \"f\"], \"up\"];\r\n      } else if (nodeOne.direction === \"down\") {\r\n        return [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n      } else if (nodeOne.direction === \"up-right\") {\r\n        return [1.5, null, \"up\"];\r\n      } else if (nodeOne.direction === \"down-right\") {\r\n        return [2.5, null, \"up\"];\r\n      } else if (nodeOne.direction === \"up-left\") {\r\n        return [1.5, null, \"up\"];\r\n      } else if (nodeOne.direction === \"down-left\") {\r\n        return [2.5, null, \"up\"];\r\n      }\r\n    } else if (x2 > x1 && y1 === y2) {\r\n      if (nodeOne.direction === \"up\") {\r\n        return [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n      } else if (nodeOne.direction === \"right\") {\r\n        return [2, [\"r\", \"f\"], \"down\"];\r\n      } else if (nodeOne.direction === \"left\") {\r\n        return [2, [\"l\", \"f\"], \"down\"];\r\n      } else if (nodeOne.direction === \"down\") {\r\n        return [1, [\"f\"], \"down\"];\r\n      } else if (nodeOne.direction === \"up-right\") {\r\n        return [2.5, null, \"down\"];\r\n      } else if (nodeOne.direction === \"down-right\") {\r\n        return [1.5, null, \"down\"];\r\n      } else if (nodeOne.direction === \"up-left\") {\r\n        return [2.5, null, \"down\"];\r\n      } else if (nodeOne.direction === \"down-left\") {\r\n        return [1.5, null, \"down\"];\r\n      }\r\n    }\r\n    if (y2 < y1 && x1 === x2) {\r\n      if (nodeOne.direction === \"up\") {\r\n        return [2, [\"l\", \"f\"], \"left\"];\r\n      } else if (nodeOne.direction === \"right\") {\r\n        return [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n      } else if (nodeOne.direction === \"left\") {\r\n        return [1, [\"f\"], \"left\"];\r\n      } else if (nodeOne.direction === \"down\") {\r\n        return [2, [\"r\", \"f\"], \"left\"];\r\n      } else if (nodeOne.direction === \"up-right\") {\r\n        return [2.5, null, \"left\"];\r\n      } else if (nodeOne.direction === \"down-right\") {\r\n        return [2.5, null, \"left\"];\r\n      } else if (nodeOne.direction === \"up-left\") {\r\n        return [1.5, null, \"left\"];\r\n      } else if (nodeOne.direction === \"down-left\") {\r\n        return [1.5, null, \"left\"];\r\n      }\r\n    } else if (y2 > y1 && x1 === x2) {\r\n      if (nodeOne.direction === \"up\") {\r\n        return [2, [\"r\", \"f\"], \"right\"];\r\n      } else if (nodeOne.direction === \"right\") {\r\n        return [1, [\"f\"], \"right\"];\r\n      } else if (nodeOne.direction === \"left\") {\r\n        return [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n      } else if (nodeOne.direction === \"down\") {\r\n        return [2, [\"l\", \"f\"], \"right\"];\r\n      } else if (nodeOne.direction === \"up-right\") {\r\n        return [1.5, null, \"right\"];\r\n      } else if (nodeOne.direction === \"down-right\") {\r\n        return [1.5, null, \"right\"];\r\n      } else if (nodeOne.direction === \"up-left\") {\r\n        return [2.5, null, \"right\"];\r\n      } else if (nodeOne.direction === \"down-left\") {\r\n        return [2.5, null, \"right\"];\r\n      }\r\n    }  \r\n  }\r\n  \r\n  function manhattanDistance(nodeOne, nodeTwo) {\r\n    let nodeOneCoordinates = nodeOne.id.split(\"-\").map(ele => parseInt(ele));\r\n    let nodeTwoCoordinates = nodeTwo.id.split(\"-\").map(ele => parseInt(ele));\r\n    let xOne = nodeOneCoordinates[0];\r\n    let xTwo = nodeTwoCoordinates[0];\r\n    let yOne = nodeOneCoordinates[1];\r\n    let yTwo = nodeTwoCoordinates[1];\r\n  \r\n    let xChange = Math.abs(xOne - xTwo);\r\n    let yChange = Math.abs(yOne - yTwo);\r\n  \r\n    return (xChange + yChange);\r\n  }\r\n   \r\n  ","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {dfs} from '../algorithms/dfs'\r\nimport {AStar} from '../algorithms/aStar'\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 5;\r\nconst START_NODE_COL = 5;\r\nconst FINISH_NODE_ROW = 1;\r\nconst FINISH_NODE_COL = 12;\r\n\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      value: 30,\r\n      speedValue: 110\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDFS(visitedNodes){\r\n    for (let i = 0; i <= visitedNodes.length - 1; i++) {\r\n        setTimeout(() => {\r\n          const node = visitedNodes[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }, this.state.speedValue * i);\r\n      }\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, this.state.speedValue * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, this.state.speedValue * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, this.state.speedValue * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.addResetButton();\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeDFS() {\r\n      const {grid} = this.state;\r\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n      const visitedNodes = dfs(grid,startNode,finishNode);\r\n      this.addResetButton();\r\n      this.animateDFS(visitedNodes);\r\n    }\r\n\r\n  visualizeAStar() {\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodes = AStar(grid,startNode,finishNode);\r\n        console.log(visitedNodes);\r\n  }\r\n  handleChange = (e) =>{\r\n    this.setState({value: e.target.value})\r\n    console.log(this.state.value);\r\n  };\r\n  handleSpeedValueChange = (e) =>{\r\n    this.setState({speedValue: e.target.value}) \r\n    console.log(this.state.speedValue)\r\n  };\r\n      \r\n  disableAllButtons(){\r\n    document.getElementById('changeArrLength').disabled = true;\r\n    document.getElementById('changeAnimationSpeed').disabled = true;\r\n    const buttons = document.getElementsByClassName('sm-btn')\r\n     for (let index = 0; index < buttons.length; index++) {\r\n        buttons[index].disabled = true;\r\n        buttons[index].className = \"sm-btn disabled\";\r\n     }\r\n  }\r\n  \r\n  enableAllButtons(){\r\n    document.getElementById('changeArrLength').disabled = false;\r\n    document.getElementById('changeAnimationSpeed').disabled = false;\r\n    const buttons = document.getElementsByClassName('sm-btn')\r\n    for (let index = 0; index < buttons.length; index++) {\r\n      buttons[index].disabled = false;\r\n      buttons[index].className = \"glow-on-hover sm-btn\";\r\n    }\r\n  }\r\n\r\n  addResetButton(){\r\n        let btn = document.createElement('button');\r\n        btn.onclick = () => {\r\n          this.stop()\r\n        };\r\n        btn.className = \"sm-btn resetBtn\";\r\n        btn.innerHTML = \"RESET\"\r\n        document.getElementById('resetBtn').appendChild(btn);\r\n  }\r\n      \r\n  removeResetButton(){\r\n      const buttons = document.getElementsByClassName('glow-on-hover');\r\n      buttons[buttons.length - 1].remove();\r\n  }\r\n\r\n    stop(){\r\n    window.location.reload();\r\n    }\r\n    clearBoard(){\r\n    const newGrid = getNewGrid(this.state.grid);\r\n    console.log(newGrid);\r\n    this.setState({grid: newGrid});\r\n    const {grid} = this.state;\r\n    for (let i = 0; i < 10; i++) {\r\n        for (let x = 0; x < 15; x++) {\r\n            document.getElementById(`node-${i}-${x}`).className = 'node';\r\n            if (START_NODE_COL === x && START_NODE_ROW === i) {\r\n                const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n                document.getElementById(`node-${i}-${x}`).className = 'node node-start';\r\n                startNode.isStart = true;\r\n            }\r\n            if (FINISH_NODE_COL === x && FINISH_NODE_ROW === i) {\r\n                document.getElementById(`node-${i}-${x}`).className = 'node node-finish';\r\n                const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n                finishNode.isFinish = true;\r\n            }\r\n        }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n      <div className='algo-btn'>\r\n        <button className=\"glow-on-hover sm-btn\"  onClick={() => this.visualizeDijkstra()}>\r\n          Dijkstra's\r\n        </button>\r\n        <button className=\"glow-on-hover sm-btn\"  onClick={() => this.visualizeDFS()}>\r\n          DSF's\r\n        </button>\r\n        {/* <button  className=\"glow-on-hover sm-btn\" onClick={() => this.visualizeAStar()}>\r\n          AStar\r\n        </button> */}\r\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.clearBoard()}>\r\n         Clear Board\r\n        </button>\r\n      </div>\r\n      <div id=\"resetBtn\"></div>\r\n      \r\n      <div className=\"slider\">\r\n        \r\n        {/* <input id=\"changeArrLength\" className = \"sliderArrayLength\"\r\n           type=\"range\"\r\n           min={10}\r\n           max={50}\r\n           value={this.state.value} \r\n           onChange={this.handleChange}\r\n             />\r\n              <div>{this.state.value}</div> */}\r\n              <div>speed</div>\r\n             <input id=\"changeAnimationSpeed\" className=\"sliderAnimationSpeed\"\r\n           type=\"range\"\r\n           min={20}\r\n           max={250}\r\n           value={this.state.speedValue} \r\n           onChange={this.handleSpeedValueChange}\r\n             />\r\n            <div>{this.state.speedValue}ms</div>\r\n          </div>\r\n      <div id=\"resetBtn\"></div>\r\n        <div className=\"grid board\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>  this.handleMouseEnter(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 10; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 15; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,  \r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice(); \r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGrid = (grid) => {\r\n    const newGrid = grid.slice(); \r\n    for (let row = 0; row < 10; row++) {\r\n        for (let col = 0; col < 15; col++) {\r\n            const newNode = {\r\n                col,\r\n                row,  \r\n                isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n                isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n                distance: Infinity,\r\n                isVisited: false,\r\n                isWall: false,\r\n                previousNode: null,\r\n              };\r\n              newGrid[row][col] = newNode;\r\n        }        \r\n    }\r\n    return newGrid;\r\n}\r\n","\r\n\r\nconst Home = () => {\r\n    return (\r\n        <h1>.....</h1>\r\n    );\r\n}\r\n\r\nexport default Home","import { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className='navbar'>\r\n            <div className='topnav-centered'>\r\n            {/* <Link to='/Algo-visualizer'>\r\n                <button className=\"glow-on-hover sm-btn\">\r\n                  Home\r\n                </button>\r\n        </Link> */}\r\n            <Link to='/Algo-visualizer/sorting'>\r\n                <button className=\"glow-on-hover sm-btn\">\r\n                     Sorting\r\n                </button>\r\n            </Link>\r\n            <Link to='/Algo-visualizer/pathfinding'>\r\n                <button className=\"glow-on-hover sm-btn\">\r\n                   Pathfinding\r\n                 </button>\r\n        </Link>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar","import React from 'react';\nimport {BrowserRouter as Router, Route , Switch} from 'react-router-dom';\nimport SortingVisualizer from './Components/SortingAlgorithms/SortingVisualizer';\nimport PathfindingVisualizer from './Components/PathfindingVisualizer/PathfindingVisualizer';\nimport Home from './Components/UI/Home';\nimport Navbar from './Components/UI/Navbar'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Navbar/>\n       <div className='content'>\n          <Switch>\n            <Route exact path='/algo-visualizer'>\n                <Home/>\n            </Route>\n            <Route path='/algo-visualizer/sorting'>\n                <SortingVisualizer/>\n            </Route>\n            <Route path='/algo-visualizer/pathfinding'>\n                <PathfindingVisualizer/>\n            </Route>\n          </Switch>\n       </div>\n  </div>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}