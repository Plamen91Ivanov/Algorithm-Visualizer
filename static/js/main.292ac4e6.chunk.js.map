{"version":3,"sources":["Components/SortingAlgorithms/SortingAlgorithms.js","Components/SortingAlgorithms/SortingVisualizer.jsx","Components/PathfindingVisualizer/Node/Node.jsx","Components/algorithms/dijkstra.js","Components/algorithms/dfs.js","Components/PathfindingVisualizer/PathfindingVisualizer.jsx","Components/UI/Home.jsx","Components/UI/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","PRIMARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","bigHeight","height","result","times","t","a","swap","n","x","temp","bubleSort","getBubleSortAnimation","time","arrayL","totalAnimationSteps","arrAnimation","num","z","fix","console","log","ar","tmp","className","onClick","mergeSort","quickSort","heapSort","bubbleSort","map","value","idx","React","Component","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","dfs","visitedNodes","unvisiteNodes","nextNode","adjNodes","pop","FINISH_NODE_COL","PathfindingVisualizer","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","getElementById","nodesInShortestPathOrder","animateShortestPath","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","animateDFS","AStar","getNewGrid","visualizeDijkstra","visualizeDFS","clearBoard","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","Home","Navbar","to","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.292ac4e6.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nexport function getBubleSortAnimation(array,times) {\n  const animations = [];\n  var t = bubleSort(array,animations,times);\n  times = t;\n  return {animations,times};\n}\nfunction bubleSort(a,animations,times)\n{\n    var swap = true;\n    var n = a.length-1;\n    var x=a;\n    do{\n        swap = false;\n        for (let i = 0; i < n; i++) {\n            if (x[i] > x[i+1])\n            {\n              animations.push([i]);\n               var temp = x[i];\n               x[i] = x[i+1];\n               x[i+1] = temp;\n               swap = true;\n            }\n    }\n    times++;\n    n--;\n    if (!swap) {\n      return times;\n    }\n    }while(swap);\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport {getMergeSortAnimations} from './SortingAlgorithms';\nimport {getBubleSortAnimation} from './SortingAlgorithms';\nimport './SortingVisualizer.css';\n\nconst times = 0;\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 31;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 50));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const bigHeight = 10 * newHeight;\n          barOneStyle.height = `${bigHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  bubbleSort() {\n    const result = getBubleSortAnimation(this.state.array,times);\n    const animations = result.animations;\n    var time = result.times;\n    var arrayL = ((this.state.array.length - 1) * 3);\n    var totalAnimationSteps = arrayL * time;\n    \n    var arrAnimation = [];\n    var num = 0;\n    for (let t = 0; t < arrayL; t++) {\n      var test = t % 3 !== 2;\n      if (test) {\n        arrAnimation.push([num,num+1]);\n      }\n      else{\n        arrAnimation.push([num,num+1]);\n        num++;\n      }\n    }\n     var indexAnimation = 0;\n     var x = 0;\n     var t = 0;\n     var z = 0;\n     var fix = 0;\n      for (let i = 0; i < totalAnimationSteps; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n          setTimeout(() => {\n            console.log('z '+ z)\n          const [barOneIdx,barTwoIdx] = arrAnimation[z];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = (z - x) % 2 !== 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n            z++;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        else {\n          setTimeout(() => {\n            // if (animations.length - 2 == t) {\n            //   console.log(\"tuk\");\n            // }\n            // if (arrAnimation.length == i) {\n            //   i = -1;\n            // }\n            console.log('i ' + i );\n            console.log('arrr ' + (arrayL-1));\n            console.log(i % (arrayL - 1) === 0);\n           \n            var ar = arrAnimation[z];\n            if (animations[t] == ar[0]) {\n              t++;\n              const [barOneIdx,barTwoIdx] = arrAnimation[z];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const tmp = barOneStyle.height;\n            \n            barOneStyle.height = `${barTwoStyle.height}`;\n            barTwoStyle.height = `${tmp}`;\n            }\n            if ((i - fix) % (arrayL - 1) === 0) {\n              console.log('i wath to be here');\n              z = -1;\n              time--;\n              fix++;\n            }\n            z++;\n            x++;\n        }, i * ANIMATION_SPEED_MS);\n      }\n  }\n}\n  quickSort() {\n  }\n  heapSort() {\n  }\n  \n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"board-container\">\n        <div className=\"algo-btn\">\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.resetArray()}>Generate New Array</button>\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.quickSort()}>Quick Sort</button>\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.heapSort()}>Heap Sort</button>\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        </div>\n        <div className=\"board\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${10*value}px`,\n            }}></div>\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n     while(!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;  \r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}","export function dfs(grid, startNode, finishNode){\r\n    const visitedNodes = [];\r\n    const unvisiteNodes = getAllNodes(grid);\r\n    var unvisitedNeighbors = [];\r\n    while(!!unvisiteNodes.length){\r\n        const nextNode = startNode\r\n        startNode.isVisited = true;\r\n        visitedNodes.push(nextNode);\r\n        //const adjNodes = getNextNode(nextNode, grid);\r\n        const adjNodes = getUnvisitedNeighbors(nextNode, grid,unvisitedNeighbors);\r\n        if (nextNode === finishNode) return visitedNodes;\r\n        startNode = adjNodes.pop();\r\n        if (startNode.isWall){\r\n            startNode = adjNodes.pop();\r\n                if (startNode.isWall) {\r\n                    startNode = adjNodes.pop()\r\n                        if (startNode.isWall) {\r\n                            startNode = adjNodes.pop();\r\n                        }\r\n                }\r\n        };\r\n        unvisiteNodes.shift();\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid,unvisitedNeighbors){\r\n    const {col, row} = node;  \r\n    if (col > 0) unvisitedNeighbors.push(grid[row][col - 1]);\r\n    if (row < grid.length - 1) unvisitedNeighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) unvisitedNeighbors.push(grid[row][col + 1]);\r\n    if (row > 0) unvisitedNeighbors.push(grid[row - 1][col]);\r\n  \r\n    return unvisitedNeighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getNextNode(node, grid) {\r\n    let nextNodes = [];\r\n    const {col, row} = node;\r\n\r\n    if (col > 0) nextNodes.push(grid[row][col - 1]);\r\n    if (row < grid.length - 1) nextNodes.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) nextNodes.push(grid[row][col + 1]);\r\n    if (row > 0) nextNodes.push(grid[row - 1][col]);\r\n\r\n    // if(row > 0) {\r\n    //     if (!grid[row - 1][col].isVisited && row > 0){\r\n    //         nextNode = grid[row - 1][col];\r\n    //     } \r\n    //     else if (!grid[row][col + 1].isVisited && col < grid[0].length - 1){\r\n    //         nextNode = grid[row][col + 1];\r\n    //     } \r\n    //     else if (!grid[row + 1][col].isVisited && row < grid.length - 1){\r\n    //         nextNode = grid[row + 1][col];\r\n    //     } \r\n    //     else if (!grid[row][col - 1].isVisited && col > 0){\r\n    //         nextNode = grid[row][col - 1];\r\n    //     } \r\n    // }\r\n    var test = nextNodes.filter(nextNode => !nextNode.isVisited);\r\n    return test.filter(nextNode => !nextNode.isWall);\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for(const node of row){\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {dfs} from '../algorithms/dfs'\r\nimport {AStar} from '../algorithms/aStar'\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 5;\r\nconst START_NODE_COL = 5;\r\nconst FINISH_NODE_ROW = 1;\r\nconst FINISH_NODE_COL = 12;\r\n\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDFS(visitedNodes){\r\n    for (let i = 0; i <= visitedNodes.length - 1; i++) {\r\n        setTimeout(() => {\r\n          const node = visitedNodes[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }, 100 * i);\r\n      }\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 100 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 100 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeDFS() {\r\n      const {grid} = this.state;\r\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n      const visitedNodes = dfs(grid,startNode,finishNode);\r\n      this.animateDFS(visitedNodes);\r\n    }\r\n\r\n    visualizeAStar() {\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodes = AStar(grid,startNode,finishNode);\r\n        console.log(visitedNodes);\r\n        console.log('ho');\r\n      }\r\n\r\n  clearBoard(){\r\n    const newGrid = getNewGrid(this.state.grid);\r\n    console.log(newGrid);\r\n    this.setState({grid: newGrid});\r\n    const {grid} = this.state;\r\n    for (let i = 0; i < 10; i++) {\r\n        for (let x = 0; x < 15; x++) {\r\n            document.getElementById(`node-${i}-${x}`).className = 'node';\r\n            if (START_NODE_COL === x && START_NODE_ROW === i) {\r\n                const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n                document.getElementById(`node-${i}-${x}`).className = 'node node-start';\r\n                startNode.isStart = true;\r\n            }\r\n            if (FINISH_NODE_COL === x && FINISH_NODE_ROW === i) {\r\n                document.getElementById(`node-${i}-${x}`).className = 'node node-finish';\r\n                const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n                finishNode.isFinish = true;\r\n            }\r\n        }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n      <div className='algo-btn'>\r\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.visualizeDijkstra()}>\r\n          Dijkstra's\r\n        </button>\r\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.visualizeDFS()}>\r\n          DSF's\r\n        </button>\r\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.AStar()}>\r\n          AStar\r\n        </button>\r\n        <button className=\"glow-on-hover sm-btn\" onClick={() => this.clearBoard()}>\r\n         Clear Board\r\n        </button>\r\n      </div>\r\n\r\n        <div className=\"grid board\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>  this.handleMouseEnter(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 10; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 15; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,  \r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice(); \r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGrid = (grid) => {\r\n    const newGrid = grid.slice(); \r\n    for (let row = 0; row < 10; row++) {\r\n        for (let col = 0; col < 15; col++) {\r\n            const newNode = {\r\n                col,\r\n                row,  \r\n                isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n                isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n                distance: Infinity,\r\n                isVisited: false,\r\n                isWall: false,\r\n                previousNode: null,\r\n              };\r\n              newGrid[row][col] = newNode;\r\n        }        \r\n    }\r\n    return newGrid;\r\n}\r\n","\r\n\r\nconst Home = () => {\r\n    return (\r\n        <h1>hi</h1>\r\n    );\r\n}\r\n\r\nexport default Home","import { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className='navbar'>\r\n            <div className='topnav-centered'>\r\n            <Link to='/'>\r\n                <button className=\"glow-on-hover sm-btn\">\r\n                  Home\r\n                </button>\r\n        </Link>\r\n            <Link to='/sorting'>\r\n                <button className=\"glow-on-hover sm-btn\">\r\n                     Sorting\r\n                </button>\r\n            </Link>\r\n            <Link to='/pathfinding'>\r\n                <button className=\"glow-on-hover sm-btn\">\r\n                   Pathfinding\r\n                 </button>\r\n        </Link>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar","import React from 'react';\nimport {BrowserRouter as Router, Route , Switch} from 'react-router-dom';\nimport SortingVisualizer from './Components/SortingAlgorithms/SortingVisualizer';\nimport PathfindingVisualizer from './Components/PathfindingVisualizer/PathfindingVisualizer';\nimport Home from './Components/UI/Home';\nimport Navbar from './Components/UI/Navbar'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Navbar/>\n       <div className='content'>\n          <Switch>\n            <Route exact path='/'>\n                <Home/>\n            </Route>\n            <Route path='/sorting'>\n                <SortingVisualizer/>\n            </Route>\n            <Route path='/pathfinding'>\n                <PathfindingVisualizer/>\n            </Route>\n          </Switch>\n       </div>\n  </div>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}